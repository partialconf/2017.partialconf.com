- name: Michał Muskała
  tagline: Ecto Core Team
  image: speakers/michal.jpg
  talk: Actor Model in Elixir
  bio: |
    Student during mornings, developer at afternoons and open source
    contributor by evenings. Michal is programming languages enthusiast,
    focusing mostly on the functional side. He is a member of the Elixir's Ecto
    core team and maintainer of the MongoDB adapter. He's Google Summer of Code
    2015 alumni, where he worked on Ecto and its MongoDB integration supervised
    by José Valim himself. When not programming he enjoys reading books,
    travelling, and sailing - no matter if sunny, rainy or stormy - it's even
    better if all of those are combined!

- name: Saša Jurić
  tagline: Elixir in Action
  image: speakers/sasa.png
  talk: Basic Guarantees of Erlang VM (BEAM)
  bio: |
    Happy user of Elixir, and a satisfied customer of Erlang/OTP, currently
    working on a privacy compliance solution at Aircloak. Author of "Elixir in
    Action", and occasional blogger at theerlangelist.com.

- name: Bozhidar Batzov
  tagline: Clojure, CIDER, Rubocop
  image: speakers/bozhidar.jpg
  talk: "Clojure: The Bad Parts"
  bio: |
    Bozhidar is the author of RuboCop and the editor of the community Ruby
    style guide. He's involved in a myriad of open-source projects, mostly
    related to Ruby, Clojure and Emacs. Many people would probably describe him
    as an Emacs zealot (and they would be right). He's also quite fond of the
    Lisp family of languages, functional programming in general and Clojure in
    particular.

- name: Ilias Van Peer
  tagline: Elm Aficionado
  image: speakers/ilias.png
  talk: Elm
  bio: |
    Coffee. Code. Other stuff.

- name: Anjana Vakil
  tagline: JS Immutable Structures
  image: speakers/anjana.jpg
  talk: Immutable Data Structures for Functional JS
  bio: |
    Functional programming has been gaining a lot of popularity in the JS
    community, and with good reason: rejecting side-effects and mutability -
    in-place changes to data - helps avoid a lot of headaches. But when you
    refuse to mutate objects, you have to create a whole new object each time
    something changes, which can slow things down and eat up memory, making
    functional programming seem inefficient.

    That’s where immutable data structures come in - to save the day, and time
    and space! Also called “persistent data structures”, they help you
    efficiently make new “modified” versions of immutable objects, by reusing
    parts of the old object that you don’t need to change.

    In this talk we’ll take a look at how these data structures work, why
    they’re fantastic for functional programming, and how we can easily use
    them in our JS code thanks to libraries like Mori and Immutable.js.

- name: Emin Hasanov
  tagline: ClojureScript + React Native
  image: speakers/emin.png
  talk: Using Clojurescript to Launch iOS/Android Apps to 1M Users
  bio: |
    Story of how a small company in Azerbaijan used ClojureScript + React
    Native to launch iOS/Android apps to its one million website users. I will
    go through how we were able to quickly develop and iterate both iOS and
    Android versions at the same time, how we connected existing Rails app to
    provide a Transit API, and how we use CodePush to provide over-the-air
    updates without going through app stores.

- name: Anna Doubkova
  tagline: React FP
  image: speakers/anna.jpg
  talk: |
    Functional programming can greatly improve readability and scalability of
    your code - yet on front-end, we seem stuck with vaguely (un)defined
    principles. One of the most used libraries on the front-end React doesn’t
    seem to be very functional-friendly with all its classes. However, it does
    follow some functional patterns, and we as developers can choose to use
    these to the maximum. In this talk, you’ll learn what these patterns are,
    how redux fits into the picture with immutability and pure functions, and
    how you can make your async flow easy to reason about with functional
    libraries.
  bio: |
    Anna is a javascript developer who loves working with new technologies.
    Currently working at PizzaHut, she does full-stack development to deliver a
    great end to end solution focused on user experience. She's a frequent
    speaker, runs workshops, and likes contributing to the community.

- name: Pedro Costa
  tagline: Functional Discipline
  image: speakers/pedro.jpg
  talk: |
    How do you go functional but without breaking your client’s application
    code? Or without rewriting the whole thing? Despite having most of our
    codebases in Ruby and Javascript, we at Subvisual have been gradually
    changing how we tackle problems without having to change the language.
    We’re taking the lessons from functional languages like Elixir and Haskell
    and applying them in our projects to rip benefits that would otherwise
    require a complete rewrite. In this talk, I will show you some patterns and
    techniques that we are using right now to gradually move our projects
    already in production to more functional approaches.
  bio: |
    Self proclaimed Chief Over-Engineering Officer at Subvisual. Jumped from
    the world of HPC to the Web with Ruby. I have a shady past involving Java and
    other darker arts. I use my time on this planet with my family, my dog, crazy
    ideas and heavy weights.

- name: Yulia Startsev
  tagline: Side Effects Saga
  image: speakers/yulia.jpg
  talk: |
    Functional programming has become popular for building robust, complex UIs.
    Using React and Redux for example, alleviates many of the issues commonly
    found in UI programming. One in particular is making changes in state are
    clear and predictable. However, there are some problems which continue to
    be painful. Asynchronicity is one such pain point, since changes to state
    which are asynchronous are difficult to predict and reason about.

    In the Firefox debugger, we have explored two options within the react
    ecosystem for dealing with this: thunk args and sagas.They take two different
    approaches to the problem of communicating with an async resource and
    updating the state. Using a recent refactoring of debugger breakpoints as a
    case study, we will explore the strengths and weaknesses of each. In the
    process we will clarify the rationale and histories behind the patterns, how
    they solve the issue, and show how we came to our chosen solution. While the
    talk will be focused on the issue from a front-end/UI perspective, it might
    prove an interesting inspiration for similar problems in other places!
  bio: |
    Yulia Startsev is a self taught programmer. Her first attempt at
    programming was at age 12, scripting a Half life mod that placed a number
    of angry fish out of water while assassins ran around the perimeter. She
    has worked as an artist, curator, spatial designer, and writer -- not
    necessarily in that order -- before moving on to programming
    professionally. She currently spends her time debugging the debugger while
    developing developer tools. She feels strongly about elegantly programmed
    UIs, testing, and simplicity.

- name: Ivan Vergiliev
  tagline: Persistent Data Structures
  image: speakers/ivan.jpg
  talk: |
    When learning functional programming, one thing I frequently heard and read
    was "Oh, just ignore the performance, the concept is what's important". And
    while somewhat valid for teaching the basics, this approach is completely
    inappropriate for most kinds of production code. You do need performance.

    And one of the more important things to be performant is the data structures.
    In the talk, I'll describe some of the main ideas in designing purely
    functional data structures, as well as some more specific implementation
    details.
  bio: |
    Machine Learning and Algorithms enthusiast. Ex-Facebook and Google (x2)
    intern.
